library(shiny); runApp('testapp2.R')
# Load data ----------------------------------------------
tweets_data <- read_csv("Stweets.csv")
# Load data ----------------------------------------------
tweet <- read_csv("Stweets.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
# Load data ----------------------------------------------
tweet <- read_csv("Stweets.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('testapp2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets1.csv")
View(tweet)
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(shiny)
library(ggplot2)
library(dplyr)
library(shiny)
library(hms)
library(ggplot2)
library(dplyr)
library(shiny)
library(ggplot2)
library(DT)
library(stringr)
library(dplyr)
library(tools)
library(shinythemes)
library(readr)
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets1.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
runApp('~/AA CMU 2021 - 2023/Classes/4) Fall 2022/Rshiny/hw2-aahmad1/Shinyhw2.R')
library(readr)
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets1.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
library(shiny); runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
View(tweet)
# Avoid plotly issues ----------------------------------------------
pdf(NULL)
# Application header & title ----------------------------------------------
header <- dashboardHeader(title = " Partisan Tweet Dashboard",
# Drop down menu with hard coded values ------------------------------
dropdownMenu(type = "notifications",
notificationItem(text = "New sentiments detected",
icon = icon("users"))
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 110, color = "green",
"Need to update data")
),
dropdownMenu(type = "messages",
messageItem(
from = "Government Communication Office",
message = HTML("Bot Update! <br> Any indiaction bots are increasing in the networ?."),
icon = icon("exclamation-circle"))
)
)
# Dashboard Sidebar ----------------------------------------------
sidebar <- dashboardSidebar(
sidebarMenu(
id = "tabs",
# Menu Items ----------------------------------------------
menuItem("Plots", icon = icon("bar-chart"), tabName = "plot"),
menuItem("Holistic Stats", icon = icon("cog"), tabName = "widgets",badgeLabel = "", badgeColor = "green"),
menuItem("Tweet Table", icon = icon("table"), tabName = "table", badgeLabel = "", badgeColor = "green"),
# Inputs: select variables to plot ----------------------------------------------
radioButtons(inputId = "selected_type",
label = "Select Candidate:",
choices = c("Biden", "Trump" ),
selected = "Biden"),
# Select Hashtags ----------------------------------
# Select Manufacturer for Y-axis ----------------------------------
sliderInput(inputId = "startdate",
label = "Slect Tweet Date Range:",
min = as.Date("2020-10-13"), max = as.Date("2020-10-20"),
value = c(as.Date("2020-10-13"), as.Date("2020-10-17")))
)
)
# Dashboard body ----------------------------------------------
dash_body <- dashboardBody(tabItems(
# Plots page ----------------------------------------------
tabItem("plot",
# Plot ----------------------------------------------
fluidRow(
tabBox(title = "Plot",
width = 12,
tabPanel("Tweet Distribution by Date", plotlyOutput("plot_dist")),
tabPanel("Positive - Negative Distribution", plotlyOutput("plot_NegPos")),
tabPanel("Sentiment Percentage",plotOutput(outputId = "plot_senti")))
)
),
# Widgets page ----------------------------------------------
tabItem("widgets",
# Input and Value Boxes ----------------------------------------------
fluidRow(
infoBoxOutput("Avg_Pos"),
infoBoxOutput("GoalsPerGame"),
infoBoxOutput("Avgretweet"),
)
),
# Data Table Page ----------------------------------------------
tabItem("table",
fluidPage(
box(title = "Selected Character Stats", DT::dataTableOutput("table"), width = 12))
)
)
)
ui <- dashboardPage(header, sidebar, dash_body)
# Define server function required to create plots and value boxes -----
server <- function(input, output) {
# Reactive data function -------------------------------------------
tweets_subset <- reactive({
tweets <-  tweets_data %>%
# Slider Filter ----------------------------------------------
filter(Candidate %in% input$selected_type & Created_at >= input$startdate[1] & Created_at <= input$startdate[2])
# Return dataframe ----------------------------------------------
return(tweets)
})
# Reactive melted data ----------------------------------------------
fbInput <- reactive({
tweets_subset() %>%
melt(id = "Candidate")
})
# A barchat plot showing total wins of teams -----------------------------
output$plot_dist <- renderPlotly({
dat <- subset(fbInput(), variable == "Avg_Pos")
# Generate Plot ----------------------------------------------
ggplot(data = tweets_subset(), aes(x = Created_at)) +
geom_bar(color = 4, fill = "4") +
ggtitle("Number of Partisan Tweets") +
xlab("Date") +
ylab("Tweet Count")+
theme_classic()+
theme(axis.title = element_text(color = "black", size = 15, face = "bold"),
axis.title.y = element_text(face = "bold"))
})
# A line plot showing fouls per game of each teams -----------------------------
output$plot_NegPos <- renderPlotly({
dat <- subset(fbInput(),  variable == "FoulsPerGame")
# Generate Plot ----------------------------------------------
ggplot(data = tweets_subset(), aes_string(x = "Positive", y = "Negative")) +
theme_classic()+
theme(axis.title = element_text(color = "black", size = 15, face = "bold"),
axis.title.y = element_text(face = "bold"))+
geom_point(color = 4)
})
# A scatter plot showing relation between points and possession -----------------------------
output$plot_senti <- renderPlot({
pie_data <- tweets_subset() %>%
count(Sentiment) %>%
mutate(percent = n/sum(n))
# Generate Plot ----------------------------------------------
ggplot(data = pie_data, aes(x ="", y = percent,  fill = Sentiment)) +
geom_bar(position = "fill", width = 1, stat = "identity", color = "white") +
geom_text(aes(x = 1.0, label = scales::percent(percent, accuracy = .1)), position = position_stack(vjust = .5)) +
coord_polar(theta = "y")+
theme_void()
})
# Data table of characters ----------------------------------------------
output$table <- DT::renderDataTable({
subset(tweets_subset(),select = c(Tweet, Hashtags, Candidate))
})
# output$table <- DT::renderDataTable(
#   if(input$show_data){
#     DT::datatable(data = football_subset()[, 2:14],
#                   options = list(pageLength = 10),
#                   rownames = FALSE)
#   }, select = c(Team, Season, Wins)
# )
# Wins mean info box ----------------------------------------------
output$Avg_Pos <- renderInfoBox({
fb <- tweets_subset()
num <- round(mean(fb$Positive, na.rm = T), 2)
infoBox("Average Positivity Score", value = num, subtitle = paste(nrow(fb),"Average Positivity Score"), icon = icon("thumbs-up"), color = "green")
})
# Average Goals per game  info box ----------------------------------------------
output$GoalsPerGame <- renderInfoBox({
fb <- tweets_subset()
num <- round(mean(fb$Negative, na.rm = T), 2)
infoBox("Average Negativity Score", value = num, subtitle = paste(nrow(fb), "characters"), icon = icon("thumbs-down"), color = "red")
})
# Average Goals per game  info box ----------------------------------------------
output$Avgretweet <- renderInfoBox({
fb <- tweets_subset()
num <- round(mean(fb$Retweet_Count, na.rm = T), 2)
infoBox("Average Retweet Count", value = num, subtitle = paste(nrow(fb), "characters"), icon = icon("thumbs-down"), color = "red")
})
}
# Run the application ----------------------------------------------
shinyApp(ui = ui, server = server)
runApp('Shinyhw2.R')
library(shiny); runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
library(tidyverse)
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
# Avoid plotly issues ----------------------------------------------
pdf(NULL)
# Application header & title ----------------------------------------------
header <- dashboardHeader(title = " Partisan Tweet Dashboard",
# Drop down menu with hard coded values ------------------------------
dropdownMenu(type = "notifications",
notificationItem(text = "New sentiments detected",
icon = icon("users"))
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 110, color = "green",
"Need to update data")
),
dropdownMenu(type = "messages",
messageItem(
from = "Government Communication Office",
message = HTML("Bot Update! <br> Any indiaction bots are increasing in the networ?."),
icon = icon("exclamation-circle"))
)
)
# Dashboard Sidebar ----------------------------------------------
sidebar <- dashboardSidebar(
sidebarMenu(
id = "tabs",
# Menu Items ----------------------------------------------
menuItem("Plots", icon = icon("bar-chart"), tabName = "plot"),
menuItem("Holistic Stats", icon = icon("cog"), tabName = "widgets",badgeLabel = "", badgeColor = "green"),
menuItem("Tweet Table", icon = icon("table"), tabName = "table", badgeLabel = "", badgeColor = "green"),
# Inputs: select variables to plot ----------------------------------------------
radioButtons(inputId = "selected_type",
label = "Select Candidate:",
choices = c("Biden", "Trump" ),
selected = "Biden"),
# Select Hashtags ----------------------------------
# Select Manufacturer for Y-axis ----------------------------------
sliderInput(inputId = "startdate",
label = "Slect Tweet Date Range:",
min = as.Date("2020-10-13"), max = as.Date("2020-10-20"),
value = c(as.Date("2020-10-13"), as.Date("2020-10-17")))
)
)
# Dashboard body ----------------------------------------------
dash_body <- dashboardBody(tabItems(
# Plots page ----------------------------------------------
tabItem("plot",
# Plot ----------------------------------------------
fluidRow(
tabBox(title = "Plot",
width = 12,
tabPanel("Tweet Distribution by Date", plotlyOutput("plot_dist")),
tabPanel("Positive - Negative Distribution", plotlyOutput("plot_NegPos")),
tabPanel("Sentiment Percentage",plotOutput(outputId = "plot_senti")))
)
),
# Widgets page ----------------------------------------------
tabItem("widgets",
# Input and Value Boxes ----------------------------------------------
fluidRow(
infoBoxOutput("Avg_Pos"),
infoBoxOutput("GoalsPerGame"),
infoBoxOutput("Avgretweet"),
)
),
# Data Table Page ----------------------------------------------
tabItem("table",
fluidPage(
box(title = "Selected Character Stats", DT::dataTableOutput("table"), width = 12))
)
)
)
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
tweets_data <- tweets_data %>% rename(BotP = `Bot_probability`)
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
tweets_data <- tweets_data %>% rename(BotP = `Bot_probability`)
runApp('Shinyhw2.R')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(ggplot2)
library(shiny)
library(hms)
library(DT)
library(stringr)
library(tools)
library(readr)
library(tidyverse)
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
tweets_data <- tweets_data %>% rename(BotP = `Bot_probability`)
tweets_data <- tweets_data %>% rename(Pos_Senti = `Pos_sent`)
tweets_data <- tweets_data %>% rename(Neg_senti = `Neg_sent`)
runApp('Shinyhw2.R')
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
tweets_data <- tweets_data %>% rename(BotP = `Bot_probability`)
tweets_data <- tweets_data %>% rename(Pos_Senti = `Pos_sent`)
tweets_data <- tweets_data %>% rename(Neg_senti = `Neg_sent`)
# Load and clean  data ----------------------------------------------
tweet <- read_csv("Stweets2.csv")
names(tweet) <- str_to_title(names(tweet))
tweet$Candidate<-str_to_title(tweet$Candidate)
tweets_data <- mutate(tweet, Created_at = as.Date(Created_at, format= "%m/%d/%Y"))
tweets_data <- tweets_data %>% rename(Rtweet = `Retweet_no`)
tweets_data <- tweets_data %>% rename(BotP = `Bot_probability`)
tweets_data <- tweets_data %>% rename(Poso = `Pos_sent`)
tweets_data <- tweets_data %>% rename(Nego = `Neg_sent`)
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
library(shiny); runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
runApp('Shinyhw2.R')
library(shiny); runApp('Shinyhw2.R')
